{"version":3,"sources":["PomodoroClock.js","App.js","index.js"],"names":["PomodoroClock","state","breakLength","sessionLength","currBreakMinutes","currSessionMinutes","currSessionSeconds","currBreakSeconds","timeLeft","currentLabel","isPaused","handleReset","bind","handleDecrement","handleIncrement","startStopTimer","convertTimeFormat","this","setState","event","target","value","prevState","seconds","minutes","countDown","setInterval","clearInterval","id","size","onClick","React","Component","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c1758f99.chunk.js","sourcesContent":["import React from 'react'\r\nimport { FiRefreshCw } from \"react-icons/fi\";\r\nimport { GrPlayFill } from \"react-icons/gr\";\r\n\r\n\r\n\r\nclass PomodoroClock extends React.Component {\r\n    constructor() {\r\n        super()\r\n        // I know, lots of state props...\r\n        this.state = {\r\n            breakLength: 5,\r\n            sessionLength: 25,\r\n            currBreakMinutes: 5,\r\n            currSessionMinutes: 25,\r\n            currSessionSeconds: 0,\r\n            currBreakSeconds: 0,\r\n            timeLeft: '',\r\n            currentLabel: 'Session',\r\n            isPaused: true\r\n        }\r\n        this.handleReset = this.handleReset.bind(this);\r\n        this.handleDecrement = this.handleDecrement.bind(this);\r\n        this.handleIncrement = this.handleIncrement.bind(this);\r\n        this.startStopTimer = this.startStopTimer.bind(this);\r\n        this.convertTimeFormat = this.convertTimeFormat.bind(this);\r\n    }\r\n\r\n    // Reset them ALL!!!!!!\r\n    handleReset() {\r\n        this.setState({\r\n            isPaused: true,\r\n            breakLength: 5, \r\n            sessionLength: 25, \r\n            currBreakMinutes: 5, \r\n            currSessionMinutes: 25, \r\n            currSessionSeconds: 0,\r\n            currBreakSeconds: 0,\r\n            currentLabel: 'Session',\r\n        })\r\n    }\r\n\r\n    handleDecrement(event) { // Check if its break-decrement\r\n        if (event.target.value === \"break-decrement\") {\r\n            if (this.state.breakLength > 1 && this.state.isPaused === true) { // This makes sure we can't go lower than 1 minute break time\r\n                this.setState (prevState => {                             // It also makes sure its paused before we change anything.\r\n                    return {\r\n                        breakLength: prevState.breakLength - 1,\r\n                        currBreakMinutes: prevState.breakLength - 1,\r\n                        currBreakSeconds: 0\r\n                    }   // This updates breakLength and also the timer values, Minutes and seconds\r\n                }) \r\n            }\r\n\r\n        } else { // Check if its not break decrement, aka if its session-decrement\r\n            if (this.state.sessionLength > 1 && this.state.isPaused === true) { // This makes sure we can't go lower than 1 minute session time\r\n                this.setState (prevState => {                                // It also makes sure its paused before we change anything.\r\n                    return {\r\n                        sessionLength: prevState.sessionLength - 1,\r\n                        currSessionMinutes: prevState.sessionLength - 1,\r\n                        currSessionSeconds: 0\r\n                    }   // This updates breakLength and also the timer values, Minutes and seconds\r\n                }) \r\n            }\r\n        }\r\n    }\r\n\r\n    handleIncrement(event) {\r\n        if (event.target.value === \"break-increment\") { // Check if its a break increment\r\n            if (this.state.breakLength < 60 && this.state.isPaused === true) { // This makes sure we can't go above 60\r\n                this.setState (prevState => {           // It also makes sure its paused before we change anything.\r\n                    return {     \r\n                        breakLength: prevState.breakLength + 1,\r\n                        currBreakMinutes: prevState.breakLength + 1,\r\n                        currBreakSeconds: 0\r\n                    }   // This updates breakLength and also the timer values, Minutes and seconds\r\n                }) \r\n            }\r\n        } else { //Check if its not a break increment, aka if its a session increment\r\n            if (this.state.sessionLength < 60 && this.state.isPaused === true) { // This makes sure we can't go above 60\r\n                this.setState (prevState => {                   // It also makes sure its paused before we change anything.\r\n                    return {\r\n                        sessionLength: prevState.sessionLength + 1,\r\n                        currSessionMinutes: prevState.sessionLength + 1,\r\n                        currSessionSeconds: 0\r\n                    }   // This updates breakLength and also the timer values, Minutes and seconds\r\n                }) \r\n            }\r\n        }\r\n    }\r\n\r\n    // This will stop that timer IN ITS TRACKS...... it will also start it........ IN ITS TRACKS!\r\n    startStopTimer () {\r\n        this.setState(prevState => {\r\n\r\n            if (prevState.isPaused === false) {\r\n                return {\r\n                    isPaused: true\r\n                }\r\n            } else {\r\n                return {\r\n                    isPaused: false\r\n                }\r\n            }     \r\n        })\r\n    }\r\n\r\n     convertTimeFormat() {\r\n        // Grabs the correct seconds/minutes values depending on wheather its currently in SESSION or BREAK\r\n        let seconds = this.state.currentLabel === \"Session\" ? this.state.currSessionSeconds : this.state.currBreakSeconds;\r\n        let minutes = this.state.currentLabel === \"Session\" ? this.state.currSessionMinutes : this.state.currBreakMinutes;\r\n        \r\n        minutes = minutes < 10 ? \"0\" + minutes : minutes; // Convert dem minutes\r\n        seconds = seconds < 10 ? \"0\" + seconds : seconds; // Convert dem seconds\r\n        let timer = minutes + ':' + seconds;        // Turn it into timer format (mm:ss)\r\n\r\n        return timer;   // I'm a nice guy, so I return it.\r\n    }\r\n\r\n    componentDidMount () {\r\n        // Set the current session and break minutes. We don't worry about seconds since they start off as 0.\r\n        this.setState({currSessionMinutes: this.state.sessionLength, currBreakMinutes: this.state.breakLength})\r\n        \r\n        this.countDown = setInterval(() => {\r\n\r\n            // We only begin once the countdown IS NOT PAUSED.\r\n             if (this.state.isPaused === false) {\r\n\r\n                 // So after everything is done, if the output minutes is 0 and seconds is 0.... set from session to break.\r\n          /*  if ( this.state.currBreakMinutes === 0 && this.state.currBreakSeconds === 0 ) { \r\n                this.setState({\r\n                    currentLabel:\"Session\",\r\n                    currBreakMinutes: this.state.breakLength,\r\n                    currSessionMinutes: this.state.sessionLength,\r\n                    currSessionSeconds: 0,\r\n                    currBreakSeconds: 0,\r\n                })\r\n            } else if ( this.state.currSessionMinutes === 0 && this.state.currSessionSeconds === 0 ) { \r\n            \r\n                this.setState({currentLabel: \"Break\", currSessionMinutes: 0, currSessionSeconds:0})\r\n            } \r\n            */\r\n         \r\n\r\n\r\n                 \r\n                // Grabs the correct seconds/minutes values depending on wheather its currently in SESSION or BREAK\r\n                let minutes = this.state.currentLabel === \"Session\" ? this.state.currSessionMinutes : this.state.currBreakMinutes;\r\n                let seconds = this.state.currentLabel === \"Session\" ? this.state.currSessionSeconds : this.state.currBreakSeconds;\r\n\r\n                // If seconds is less or equal to 0, make it 59.\r\n                 if ( seconds <= 0 ) {\r\n                    minutes = minutes - 1;\r\n                    seconds = 59;\r\n                } else { // If its more than 0, reduce by 1.\r\n                    seconds = seconds - 1;\r\n                }\r\n                \r\n                if (this.state.currentLabel === \"Session\") { // If we're currently in session, update session values\r\n                    this.setState ({  \r\n                        currSessionMinutes: minutes,\r\n                        currSessionSeconds: seconds\r\n                    })\r\n                } else {                                   // Else, we update the Break values\r\n                    this.setState ({  \r\n                        currBreakMinutes: minutes,\r\n                        currBreakSeconds: seconds\r\n                    })\r\n                }\r\n\r\n                // So after everything is done, if the output minutes is 0 and seconds is 0.... set from session to break.\r\n                if ( minutes === 0 && seconds === 0 ) { \r\n                    if (this.state.currentLabel === \"Session\") {\r\n                        this.setState({currentLabel: \"Break\"})\r\n                    } else {                // If we finished break, reset our countdown values and start again from session.\r\n                        this.setState({\r\n                            currentLabel:\"Session\",\r\n                            currBreakMinutes: this.state.breakLength,\r\n                            currSessionMinutes: this.state.sessionLength,\r\n                            currSessionSeconds: 0,\r\n                            currBreakSeconds: 0,\r\n                        })\r\n                    }\r\n                 } \r\n            }    \r\n        }, 1000);  \r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearInterval(this.countDown) // Kind of a cleanup function I guess... I put it here to be safe\r\n    }\r\n\r\n\r\n    \r\n\r\n    render() {\r\n\r\n        return (\r\n            <div id='grid-container'>\r\n                \r\n                <h1 id='title'>Pomodoro Clock</h1>\r\n                \r\n                <div id=\"break\">\r\n                    <h2 id=\"break-label\">Break Length</h2>\r\n                    <button size = '4em' id=\"break-increment\" value=\"break-increment\" onClick={this.handleIncrement}>Increment</button>\r\n                    <div id=\"break-length\">{this.state.breakLength}</div>\r\n                    <button size = '4em' id=\"break-decrement\" value=\"break-decrement\" onClick={this.handleDecrement}>Decrement</button>\r\n                </div>\r\n                \r\n                <div id=\"session\">\r\n                    <h2 id=\"session-label\">Session Length</h2>\r\n                    <button size = '4em' id=\"session-increment\" value=\"session-increment\" onClick={this.handleIncrement}>Increment</button>\r\n                    <div id=\"session-length\">{this.state.sessionLength}</div>\r\n                    <button size = '4em' id=\"session-decrement\" value=\"session-decrement\" onClick={this.handleDecrement}>Decrement</button>\r\n                </div>\r\n                \r\n                <div id=\"timer\">\r\n                    <div id=\"timer-label\">{this.state.currentLabel}</div>\r\n                    <div id=\"time-left\">{this.convertTimeFormat()}</div>\r\n                    <button size=\"4em\" id=\"start_stop\" onClick={this.startStopTimer}>Start/Stop</button>\r\n                    <button size ='4em' id=\"reset\" onClick={this.handleReset}>RESET</button>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default PomodoroClock","import React from 'react';\nimport PomodoroClock from './PomodoroClock';\nimport './style.css'\n\nfunction App() {\n  return (\n    <PomodoroClock />\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}