{"version":3,"sources":["PomodoroClock.js","App.js","index.js"],"names":["PomodoroClock","state","breakLength","sessionLength","currBreakMinutes","currSessionMinutes","currSeconds","timeLeft","currentLabel","isPaused","handleReset","bind","handleDecrement","handleIncrement","startStopTimer","this","setState","event","target","value","prevState","timer","minutes","seconds","setInterval","className","id","onClick","React","Component","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qMA4IeA,E,kDAzIX,aAAe,IAAD,8BACV,gBACKC,MAAQ,CACTC,YAAa,EACbC,cAAe,GACfC,iBAAkB,EAClBC,mBAAoB,GACpBC,YAAa,EACbC,SAAU,GACVC,aAAc,UACdC,UAAU,GAEd,EAAKC,YAAc,EAAKA,YAAYC,KAAjB,gBACnB,EAAKC,gBAAkB,EAAKA,gBAAgBD,KAArB,gBACvB,EAAKE,gBAAkB,EAAKA,gBAAgBF,KAArB,gBACvB,EAAKG,eAAiB,EAAKA,eAAeH,KAApB,gBAfZ,E,0DAmBVI,KAAKC,SAAS,CAACd,YAAa,EAAGC,cAAe,O,sCAGlCc,GACe,oBAAvBA,EAAMC,OAAOC,MACTJ,KAAKd,MAAMC,YAAc,GACzBa,KAAKC,UAAU,SAAAI,GACX,MAAO,CACHlB,YAAakB,EAAUlB,YAAc,EACrCE,iBAAkBgB,EAAUhB,iBAAkB,MAMtDW,KAAKd,MAAME,cAAgB,GAC3BY,KAAKC,UAAU,SAAAI,GACX,MAAO,CACHjB,cAAeiB,EAAUjB,cAAgB,EACzCE,mBAAoBe,EAAUf,mBAAoB,EAClDC,YAAa,Q,sCAOjBW,GACe,oBAAvBA,EAAMC,OAAOC,MACTJ,KAAKd,MAAMC,YAAc,IACzBa,KAAKC,UAAU,SAAAI,GACX,MAAO,CACHlB,YAAakB,EAAUlB,YAAc,MAK7Ca,KAAKd,MAAME,cAAgB,IAC3BY,KAAKC,UAAU,SAAAI,GACX,MAAO,CACHjB,cAAeiB,EAAUjB,cAAgB,Q,uCAO1C,IAAD,OACdY,KAAKC,UAAS,SAAAI,GACV,MAAO,CACHX,UAAW,EAAKR,MAAMQ,e,0CAKZ,IAGdY,EAHa,OACbC,EAAsC,YAA5BP,KAAKd,MAAMO,aAA6BO,KAAKd,MAAMI,mBAAqBU,KAAKd,MAAMG,iBAC7FmB,EAAUR,KAAKd,MAAMK,YAGzBkB,aAAY,YAEqB,IAAxB,EAAKvB,MAAMQ,WAEPc,GAAW,GACZD,GAAoB,EACpBC,EAAU,IAEVA,GAAoB,EAKxBF,GAFAC,EAAUA,EAAU,GAAK,IAAMA,EAAUA,GAEvB,KADlBC,EAAUA,EAAU,GAAK,IAAMA,EAAUA,GAGzC,EAAKP,UAAU,SAAAI,GACX,MAAO,CACHb,SAAUc,EACVhB,mBAAoBiB,EACpBhB,YAAaiB,SAI1B,O,+BAKH,OACI,yBAAKE,UAAU,kBAEX,8CAEA,yBAAKC,GAAG,SACJ,wBAAIA,GAAG,eAAP,gBACA,4BAAQA,GAAG,kBAAkBP,MAAM,kBAAkBQ,QAASZ,KAAKF,iBAAnE,aACA,yBAAKa,GAAG,gBAAgBX,KAAKd,MAAMC,aACnC,4BAAQwB,GAAG,kBAAkBP,MAAM,kBAAkBQ,QAASZ,KAAKH,iBAAnE,cAGJ,yBAAKc,GAAG,WACJ,wBAAIA,GAAG,iBAAP,kBACA,4BAAQA,GAAG,oBAAoBP,MAAM,oBAAoBQ,QAASZ,KAAKF,iBAAvE,aACA,yBAAKa,GAAG,kBAAkBX,KAAKd,MAAME,eACrC,4BAAQuB,GAAG,oBAAoBP,MAAM,oBAAoBQ,QAASZ,KAAKH,iBAAvE,cAGJ,yBAAKc,GAAG,SACJ,yBAAKA,GAAG,eAAeX,KAAKd,MAAMO,cAClC,yBAAKkB,GAAG,aAAaX,KAAKd,MAAMM,UAChC,4BAAQmB,GAAG,aAAaC,QAASZ,KAAKD,gBAAtC,cACA,4BAAQY,GAAG,QAAQC,QAASZ,KAAKL,aAAjC,e,GAnIQkB,IAAMC,WCOnBC,MANf,WACE,OACE,kBAAC,EAAD,OCDJC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,U","file":"static/js/main.ad969966.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nclass PomodoroClock extends React.Component {\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            breakLength: 5,\r\n            sessionLength: 25,\r\n            currBreakMinutes: 5,\r\n            currSessionMinutes: 25,\r\n            currSeconds: 0,\r\n            timeLeft: 25,\r\n            currentLabel: 'Session',\r\n            isPaused: false\r\n        }\r\n        this.handleReset = this.handleReset.bind(this);\r\n        this.handleDecrement = this.handleDecrement.bind(this);\r\n        this.handleIncrement = this.handleIncrement.bind(this);\r\n        this.startStopTimer = this.startStopTimer.bind(this);\r\n    }\r\n\r\n    handleReset() {\r\n        this.setState({breakLength: 5, sessionLength: 25})\r\n    }\r\n\r\n    handleDecrement(event) { // Check if its break-decrement\r\n        if (event.target.value === \"break-decrement\") {\r\n            if (this.state.breakLength > 1) { // This makes sure we can't go lower than 1 minute break time\r\n                this.setState (prevState => {\r\n                    return {\r\n                        breakLength: prevState.breakLength - 1,\r\n                        currBreakMinutes: prevState.currBreakMinutes -1\r\n                    }\r\n                }) \r\n            }\r\n\r\n        } else { // Check if its not break decrement, aka if its session-decrement\r\n            if (this.state.sessionLength > 1) { // This makes sure we can't go lower than 1 minute session time\r\n                this.setState (prevState => {\r\n                    return {\r\n                        sessionLength: prevState.sessionLength - 1,    \r\n                        currSessionMinutes: prevState.currSessionMinutes -1,\r\n                        currSeconds: 0,\r\n                    }\r\n                }) \r\n            }\r\n        }\r\n    }\r\n\r\n    handleIncrement(event) {\r\n        if (event.target.value === \"break-increment\") { // Check if its a break increment\r\n            if (this.state.breakLength < 60) { // This makes sure we can't go above 60\r\n                this.setState (prevState => {\r\n                    return {     \r\n                        breakLength: prevState.breakLength + 1\r\n                    }\r\n                }) \r\n            }\r\n        } else { //Check if its not a break increment, aka if its a session increment\r\n            if (this.state.sessionLength < 60) { // This makes sure we can't go above 60\r\n                this.setState (prevState => { \r\n                    return {\r\n                        sessionLength: prevState.sessionLength + 1\r\n                    }\r\n                }) \r\n            }\r\n        }\r\n    }\r\n\r\n    startStopTimer () {\r\n        this.setState(prevState => {\r\n            return {\r\n                isPaused: !this.state.isPaused\r\n            }\r\n        })\r\n    }\r\n\r\n    componentDidMount () {\r\n        let minutes = this.state.currentLabel === \"Session\" ? this.state.currSessionMinutes : this.state.currBreakMinutes;\r\n        let seconds = this.state.currSeconds;\r\n        let timer;\r\n\r\n        setInterval(() => {\r\n\r\n             if (this.state.isPaused === false) {\r\n\r\n                if ( seconds <= 0 ) {\r\n                    minutes = minutes - 1;\r\n                    seconds = 59;\r\n                } else {\r\n                    seconds = seconds - 1;\r\n                }\r\n\r\n                minutes = minutes < 10 ? \"0\" + minutes : minutes;\r\n                seconds = seconds < 10 ? \"0\" + seconds : seconds;\r\n                timer = minutes + ':' + seconds\r\n\r\n                this.setState (prevState => {\r\n                    return {\r\n                        timeLeft: timer,\r\n                        currSessionMinutes: minutes,\r\n                        currSeconds: seconds\r\n                    }\r\n                })\r\n            }    \r\n        }, 1000);\r\n    }\r\n    \r\n\r\n    render() {\r\n        return (\r\n            <div className='grid-container'>\r\n                \r\n                <h1>Pomodoro Clock</h1>\r\n                \r\n                <div id=\"break\">\r\n                    <h2 id=\"break-label\">Break Length</h2>\r\n                    <button id=\"break-increment\" value=\"break-increment\" onClick={this.handleIncrement}>Increment</button>\r\n                    <div id=\"break-length\">{this.state.breakLength}</div>\r\n                    <button id=\"break-decrement\" value=\"break-decrement\" onClick={this.handleDecrement}>Decrement</button>\r\n                </div>\r\n                \r\n                <div id=\"session\">\r\n                    <h2 id=\"session-label\">Session Length</h2>\r\n                    <button id=\"session-increment\" value=\"session-increment\" onClick={this.handleIncrement}>Increment</button>\r\n                    <div id=\"session-length\">{this.state.sessionLength}</div>\r\n                    <button id=\"session-decrement\" value=\"session-decrement\" onClick={this.handleDecrement}>Decrement</button>\r\n                </div>\r\n                \r\n                <div id=\"timer\">\r\n                    <div id=\"timer-label\">{this.state.currentLabel}</div>\r\n                    <div id=\"time-left\">{this.state.timeLeft}</div>\r\n                    <button id=\"start_stop\" onClick={this.startStopTimer}>Start/Stop</button>\r\n                    <button id=\"reset\" onClick={this.handleReset}>RESET</button>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default PomodoroClock","import React from 'react';\nimport PomodoroClock from './PomodoroClock';\n\nfunction App() {\n  return (\n    <PomodoroClock />\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}