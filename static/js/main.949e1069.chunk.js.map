{"version":3,"sources":["countdown.mp4","clock.gif","PomodoroClock.js","App.js","index.js"],"names":["module","exports","PomodoroClock","state","breakLength","sessionLength","currBreakMinutes","currSessionMinutes","currSessionSeconds","currBreakSeconds","currentLabel","isPaused","hide","handleReset","bind","handleDecrement","handleIncrement","startStopTimer","convertTimeFormat","hideDisplay","sound","React","createRef","video","this","display","current","pause","currentTime","setState","event","target","value","prevState","seconds","minutes","countDown","setInterval","play","clearInterval","console","log","id","style","src","clock","alt","size","onClick","ref","width","height","controls","autoplay","loop","countdown","Component","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.949e1069.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/countdown.574631aa.mp4\";","module.exports = __webpack_public_path__ + \"static/media/clock.9ddea689.gif\";","import React from 'react'\r\nimport countdown from './countdown.mp4'\r\nimport clock from './clock.gif'\r\n\r\nclass PomodoroClock extends React.Component {\r\n    constructor() {\r\n        super()\r\n        // I know, lots of state props...\r\n        this.state = {\r\n            breakLength: 5,\r\n            sessionLength: 25,\r\n            currBreakMinutes: 5,\r\n            currSessionMinutes: 25,\r\n            currSessionSeconds: 0,\r\n            currBreakSeconds: 0,\r\n            currentLabel: 'Session',\r\n            isPaused: true,\r\n            hide: true\r\n        }\r\n        this.handleReset = this.handleReset.bind(this);\r\n        this.handleDecrement = this.handleDecrement.bind(this);\r\n        this.handleIncrement = this.handleIncrement.bind(this);\r\n        this.startStopTimer = this.startStopTimer.bind(this);\r\n        this.convertTimeFormat = this.convertTimeFormat.bind(this);\r\n        this.hideDisplay = this.hideDisplay.bind(this);\r\n\r\n        this.sound = React.createRef();\r\n        this.video = React.createRef();\r\n    }\r\n\r\n    hideDisplay() {\r\n        if (this.state.hide){\r\n            return {display:'none'}\r\n        } else {\r\n            return {display:'initial'}\r\n        }\r\n    }\r\n\r\n    // Reset them ALL!!!!!!\r\n    handleReset() {\r\n        this.sound.current.pause();\r\n        this.sound.current.currentTime = 0;\r\n        this.setState({\r\n            isPaused: true,\r\n            breakLength: 5, \r\n            sessionLength: 25, \r\n            currBreakMinutes: 5, \r\n            currSessionMinutes: 25, \r\n            currSessionSeconds: 0,\r\n            currBreakSeconds: 0,\r\n            currentLabel: 'Session',\r\n        })\r\n    }\r\n\r\n    handleDecrement(event) { // Check if its break-decrement\r\n        if (event.target.value === \"break-decrement\") {\r\n            if (this.state.breakLength > 1 && this.state.isPaused === true) { // This makes sure we can't go lower than 1 minute break time\r\n                this.setState (prevState => {                             // It also makes sure its paused before we change anything.\r\n                    return {\r\n                        breakLength: prevState.breakLength - 1,\r\n                        currBreakMinutes: prevState.breakLength - 1,\r\n                        currBreakSeconds: 0\r\n                    }   // This updates breakLength and also the timer values, Minutes and seconds\r\n                }) \r\n            }\r\n\r\n        } else { // Check if its not break decrement, aka if its session-decrement\r\n            if (this.state.sessionLength > 1 && this.state.isPaused === true) { // This makes sure we can't go lower than 1 minute session time\r\n                this.setState (prevState => {                                // It also makes sure its paused before we change anything.\r\n                    return {\r\n                        sessionLength: prevState.sessionLength - 1,\r\n                        currSessionMinutes: prevState.sessionLength - 1,\r\n                        currSessionSeconds: 0\r\n                    }   // This updates breakLength and also the timer values, Minutes and seconds\r\n                }) \r\n            }\r\n        }\r\n    }\r\n\r\n    handleIncrement(event) {\r\n        if (event.target.value === \"break-increment\") { // Check if its a break increment\r\n            if (this.state.breakLength < 60 && this.state.isPaused === true) { // This makes sure we can't go above 60\r\n                this.setState (prevState => {           // It also makes sure its paused before we change anything.\r\n                    return {     \r\n                        breakLength: prevState.breakLength + 1,\r\n                        currBreakMinutes: prevState.breakLength + 1,\r\n                        currBreakSeconds: 0\r\n                    }   // This updates breakLength and also the timer values, Minutes and seconds\r\n                }) \r\n            }\r\n        } else { //Check if its not a break increment, aka if its a session increment\r\n            if (this.state.sessionLength < 60 && this.state.isPaused === true) { // This makes sure we can't go above 60\r\n                this.setState (prevState => {                   // It also makes sure its paused before we change anything.\r\n                    return {\r\n                        sessionLength: prevState.sessionLength + 1,\r\n                        currSessionMinutes: prevState.sessionLength + 1,\r\n                        currSessionSeconds: 0\r\n                    }   // This updates breakLength and also the timer values, Minutes and seconds\r\n                }) \r\n            }\r\n        }\r\n    }\r\n\r\n    // This will stop that timer IN ITS TRACKS...... it will also start it........ IN ITS TRACKS!\r\n    startStopTimer () {\r\n    \r\n        this.setState(prevState => {\r\n\r\n            if (prevState.isPaused === false) {\r\n                return {\r\n                    isPaused: true\r\n                }\r\n            } else {\r\n                return {\r\n                    isPaused: false\r\n                }\r\n            }     \r\n        })\r\n    }\r\n\r\n     convertTimeFormat() {\r\n        // Grabs the correct seconds/minutes values depending on wheather its currently in SESSION or BREAK\r\n        let seconds = this.state.currentLabel === \"Session\" ? this.state.currSessionSeconds : this.state.currBreakSeconds;\r\n        let minutes = this.state.currentLabel === \"Session\" ? this.state.currSessionMinutes : this.state.currBreakMinutes;\r\n        \r\n        minutes = minutes < 10 ? \"0\" + minutes : minutes; // Convert dem minutes\r\n        seconds = seconds < 10 ? \"0\" + seconds : seconds; // Convert dem seconds\r\n        let timer = minutes + ':' + seconds;        // Turn it into timer format (mm:ss)\r\n\r\n        return timer;   // I'm a nice guy, so I return it.\r\n    }\r\n\r\n    componentDidMount () {\r\n        // Set the current session and break minutes. We don't worry about seconds since they start off as 0.\r\n        //this.setState({currSessionMinutes: this.state.sessionLength, currBreakMinutes: this.state.breakLength})\r\n        \r\n        this.countDown = setInterval(() => {\r\n\r\n            // We only begin once the countdown IS NOT PAUSED.\r\n             if (this.state.isPaused === false) {\r\n                let currentLabel = this.state.currentLabel;\r\n                let hide = this.state.hide;\r\n\r\n                // Grabs the correct seconds/minutes values depending on wheather its currently in SESSION or BREAK\r\n                let minutes = currentLabel === \"Session\" ? this.state.currSessionMinutes : this.state.currBreakMinutes;\r\n                let seconds = currentLabel === \"Session\" ? this.state.currSessionSeconds : this.state.currBreakSeconds;\r\n                let breakLength = this.state.breakLength;\r\n                let sessionLength = this.state.sessionLength;\r\n                \r\n                seconds--\r\n                \r\n\r\n                if ( seconds < 0 ) { // If seconds is less or equal to 0, make it 59.\r\n                    minutes = minutes - 1;\r\n                    seconds = 59;\r\n                }\r\n\r\n                \r\n                if ( minutes < 0 ) {\r\n                    if (currentLabel === \"Session\") {\r\n                        currentLabel = \"Break\";\r\n                        minutes = this.state.currBreakMinutes;\r\n                        seconds = this.state.currBreakSeconds;\r\n                    } else {\r\n                        currentLabel = \"Session\";\r\n                        minutes = this.state.currSessionMinutes;\r\n                        seconds = this.state.currSessionSeconds;\r\n                    }\r\n                }\r\n\r\n                // So after everything is done, if the output minutes is 0 and seconds is 0.... set from session to break.\r\n                 if ( minutes === 0 && seconds === 0 ) {\r\n                    this.sound.current.play();\r\n                    this.video.current.play();\r\n                    hide = false;\r\n                 }     \r\n\r\n                 this.setState(prevState => {\r\n                     if (currentLabel === \"Session\") {\r\n                         return {\r\n                            currentLabel: currentLabel,\r\n                            currSessionMinutes: minutes,\r\n                            currSessionSeconds: seconds,\r\n                            currBreakMinutes: breakLength,\r\n                            currBreakSeconds: 0,\r\n                            hide: hide\r\n                         }\r\n                     } else {\r\n                         return {\r\n                            currentLabel: currentLabel,\r\n                            currBreakMinutes: minutes,\r\n                            currBreakSeconds: seconds,\r\n                            currSessionMinutes: sessionLength,\r\n                            currSessionSeconds: 0,\r\n                            hide: hide\r\n                         }\r\n                     }\r\n                 });\r\n            }    \r\n        }, 1000);  \r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearInterval(this.countDown) // Kind of a cleanup function I guess... I put it here to be safe\r\n    }\r\n\r\n\r\n    \r\n\r\n    render() {\r\n        console.log(this.convertTimeFormat())\r\n\r\n        return (\r\n            <div id='grid-container'>\r\n                <div id=\"hah\" style={this.hideDisplay()}><img src={clock} alt=\"oh\"></img></div>\r\n                <div id=\"clock-container\">\r\n                    <div id=\"break\">\r\n                        <p id=\"break-label\">Break Length</p>\r\n                        <button size = '4em' id=\"break-increment\" value=\"break-increment\" onClick={this.handleIncrement}>Increment</button>\r\n                        <div id=\"break-length\">{this.state.breakLength}</div>\r\n                        <button size = '4em' id=\"break-decrement\" value=\"break-decrement\" onClick={this.handleDecrement}>Decrement</button>\r\n                    </div>\r\n                \r\n                    <div id=\"session\">\r\n                        <p id=\"session-label\">Session Length</p>\r\n                        <button size = '4em' id=\"session-increment\" value=\"session-increment\" onClick={this.handleIncrement}>Increment</button>\r\n                        <div id=\"session-length\">{this.state.sessionLength}</div>\r\n                        <button size = '4em' id=\"session-decrement\" value=\"session-decrement\" onClick={this.handleDecrement}>Decrement</button>\r\n                    </div>\r\n                \r\n                    <div id=\"timer\">\r\n                        <h1 id='title'>Pomodoro Clock</h1>\r\n                        <div id=\"timer-label\">{this.state.currentLabel}</div>\r\n                        <div id=\"time-left\">{this.convertTimeFormat()}</div>\r\n                        <button size=\"4em\" id=\"start_stop\" onClick={this.startStopTimer}>Start/Stop</button>\r\n                        <button size ='4em' id=\"reset\" onClick={this.handleReset}>RESET</button>\r\n                    </div>\r\n                </div>\r\n                {/*Hehehehehehehehehe*/}\r\n                <div id=\"countdownVid\" style={this.hideDisplay()}><video ref={this.video}  width = \"260\" height=\"180\" controls autoplay loop><source src={countdown}></source></video></div>\r\n                <audio id=\"beep\" ref={this.sound} src=\"\"></audio>\r\n               \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default PomodoroClock","import React from 'react';\nimport PomodoroClock from './PomodoroClock';\nimport './style.css'\n\n\n\nfunction App() {\n  return (\n    <PomodoroClock />\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}